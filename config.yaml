listen_addr: "127.0.0.1:3000"
# TLS configuration - uncomment to enable TLS
tls:
  # Option 1: Manual certificates (existing approach) - ACTIVE FOR LOCAL TESTING
  cert_path: "./certs/cert.pem"
  key_path: "./certs/key.pem"
  
  # Option 2: Automatic ACME/Let's Encrypt certificates
  # Comment out manual cert_path/key_path above and uncomment acme section below
  # acme:
  #   enabled: true
  #   domains:
  #     - "yourdomain.com"
  #     - "www.yourdomain.com"
  #   email: "your-email@example.com"  # Required for Let's Encrypt account
  #   staging: true  # Set to true for testing with Let's Encrypt staging
  #   storage_path: "./acme_storage"  # Where to store certificates and account info
  #   renewal_days_before_expiry: 30  # Renew certificates 30 days before expiry

# Health check configuration
health_check:
  enabled: true
  interval_secs: 10
  timeout_secs: 5
  path: "/health"      # Default path to check
  unhealthy_threshold: 3
  healthy_threshold: 2

# Backend-specific health check paths
backend_health_paths:
  "https://httpbin.org": "/get"
  "https://postman-echo.com": "/get"
  "https://jsonplaceholder.typicode.com": "/todos/1"


routes:
  "/":  # Add root route that redirects to /static
    type: "redirect"
    target: "/static"
    status_code: 302
  "/static":
    type: "static"
    root: "./static"
  "/redirect":
    type: "redirect"
    target: "https://www.example.com"
    status_code: 302
  "/proxy":
    type: "proxy"
    target: "https://httpbin.org"
    path_rewrite: "/anything" # Example: rewrite /proxy/foo to /anything/foo
    rate_limit: # Example: Limit by IP, 10 requests per minute
      by: "ip"
      requests: 10
      period: "1m"
    request_headers:
      add:
        "X-My-Custom-Header": "MyValue"
        "X-Forwarded-By": "Prox"
        "X-Real-IP": "{client_ip}"
      remove: ["User-Agent", "Referer"]
    response_headers:
      add:
        "Server": "Prox"
      remove: ["X-Powered-By"]
  "/api/v1":
    type: "proxy"
    target: "https://jsonplaceholder.typicode.com" # Assuming this is a placeholder for a real internal service
    path_rewrite: "/" # Example: rewrite /api/v1/users to /users on the backend
    rate_limit: # Example: Limit by a specific header X-API-Key, 5 requests per 30 seconds
      by: "header"
      header_name: "X-API-Key"
      requests: 5
      period: "30s"
      status_code: 403
      message: "Rate limit exceeded for your API key."
  "/balance":
    type: "load_balance"
    targets:
      - "https://httpbin.org"
      - "https://postman-echo.com"
    strategy: "round_robin"
    path_rewrite: "/anything" # Changed from /newpath to /anything to use a common echo endpoint
    rate_limit: # Example: Route-wide limit, 100 requests per hour
      by: "route"
      requests: 100
      period: "1h"
  "/manipulate": # New route for testing body manipulation
    type: "proxy"
    target: "https://httpbin.org" # Target service, httpbin is good for observing requests
    path_rewrite: "/anything"      # Rewrites /manipulate/* to /anything/*
    request_headers: # Optional: Add some headers to see them in httpbin
      add:
        "X-Prox-Manipulation-Test": "Request"
    request_body:
      condition:
        method_is: "POST"
        path_matches: "/manipulate/test-post" # Condition to trigger body change
      set_json:
        original_request_path: "{uri_path}"
        message: "Request body set by Prox"
        timestamp: "{timestamp_iso}"
    response_headers: # Optional: Add some headers to see them in the final response
      add:
        "X-Prox-Manipulation-Test": "Response"
    response_body:
      condition:
        # Example: Trigger if upstream responds with 200 OK.
        # Note: Actual status code condition isn't implemented yet in your check_condition,
        # so this relies on future enhancement or a different condition like a header.
        # For now, let's assume we might add a header from the upstream or use a path condition
        # on the original request if direct status code matching isn't available for response_body.
        # As a placeholder, let's use a path condition on the original request for now,
        # or we can make it unconditional for testing.
        # To make it simple for now, let's make it unconditional for any 2xx response.
        # (Actual implementation of status code check in `check_condition` for responses would be needed)
        # For a simpler test, let's make it unconditional for this example path:
        path_matches: "/manipulate/test-response-body" # Condition on original request path
      set_text: "Response body modified by Prox. Original request was to {uri_path}."
